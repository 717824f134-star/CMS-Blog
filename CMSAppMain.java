package cms;import java.time.LocalDateTime;import java.time.temporal.ChronoUnit;import java.util.Listimport java.util.Map;public class CMSAppMain {public static void main(String[] args) {CMSService service = new CMSService();Author staff1 = new Author("Aisha Kumar", "aisha@example.com", "Senior tech writer", "Staff");Author staff2 = new Author("Ravi Patel", "ravi@example.com", "Sports writer", "Staff");Author guest1 = new GuestAuthor("Neha Rao", "neha@example.org", "Guest columnist", "University X",10);service.addAuthor(staff1);service.addAuthor(staff2);service.addAuthor(guest1);Category tech = new Category("Technology", "All about tech", null);Category sports = new Category("Sports", "Sporting news", null);Category ai = new Category("AI", "Artificial Intelligence", tech);service.addCategory(tech);service.addCategory(sports);service.addCategory(ai);Post p1 = service.createPost("Intro to Java OOP","This article explains OOP concepts in Java. It has sufficient content to pass policies.", staff1);p1.addTag("java"); p1.addTag("oop");Post p2 = service.createPost("Daily Football Recap","Results from last night's matches.", staff2);p2.addTag("football");Post p3 = service.createPost("Guest Thoughts on AI","In-depth guest analysis on the ethics of AI and its future in society. This content is longer than fifty characters to satisfy guest policy.", guest1);p3.addTag("ai"); p3.addTag("ethics");service.categorizePost(p1.getPostId(), tech.getCategoryId());service.categorizePost(p2.getPostId(), sports.getCategoryId());service.categorizePost(p3.getPostId(), ai.getCategoryId());service.publishPost(p1.getPostId(), staff1); // staff -> should succeedservice.publishPost(p2.getPostId(), staff2); // too short -> should failservice.publishPost(p3.getPostId(), guest1); // guest -> should succeed (long enough)System.out.println("\n--- Category Archives: Technology ---");List<Post> techPosts = service.listByCategory(tech.getCategoryId());System.out.println("\n--- Category Archives: AI ---");List<Post> aiPosts = service.listByCategory(ai.getCategoryId());service.search("ai", true).forEach(System.out::println);System.out.println("\n--- Search by date range (last 1 hour) ---");service.search(oneHourAgo, now).forEach(System.out::println);System.out.println("\n--- Author Publication Counts ---");Map<Author, Integer> counts = service.authorPublicationCounts();counts.forEach((a, c) -> System.out.println(a.getName() + " (" + a.getRole() + "): " + c));System.out.println("\n--- All Posts and Statuses ---");service.listAllPosts().forEach(p -> System.out.println(p + " [category=" +(p.getCategory()!=null ? p.getCategory().getName() : "none") + "]"));}}
