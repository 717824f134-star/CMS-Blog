package cms;import java.time.LocalDateTime;import java.util.*;import java.util.stream.Collectors;public class CMSService {private Map<Integer, Author> authors = new HashMap<>();private Map<Integer, Post> posts = new HashMap<>();private Map<Integer, Category> categories = new HashMap<>();public Author addAuthor(Author author) {authors.put(author.getAuthorId(), author);return author;}public Category addCategory(Category category) {categories.put(category.getCategoryId(), category);return category;}public Post createPost(String title, String content, Author author) {Post p = new Post(title, content, author);posts.put(p.getPostId(), p);return p;}public void editPost(int postId, String newTitle, String newContent) {Post p = posts.get(postId);if (p == null) {System.out.println("Post not found: " + postId);return;}if (p.getStatus() == Post.Status.PUBLISHED) {System.out.println("Cannot edit published post.");return;}p.setTitle(newTitle);p.setContent(newContent);System.out.println("Edited post: " + p);}public void categorizePost(int postId, int categoryId) {Post p = posts.get(postId);Category c = categories.get(categoryId);if (p == null || c == null) {System.out.println("Post or Category not found.");return;}p.setCategory(c);System.out.println("Assigned category " + c.getName() + " to post " + p.getTitle());}public void submitForReview(int postId) {Post p = posts.get(postId);if (p == null) {System.out.println("Post not found.");return;}if (p.getStatus() != Post.Status.DRAFT) {System.out.println("Only draft posts can be submitted.");return;}p.setStatus(Post.Status.REVIEW);System.out.println("Post submitted for review: " + p);}public void publishPost(int postId, Author actor) {Post p = posts.get(postId);if (p == null) {System.out.println("Post not found.");return;}if (p.getStatus() == Post.Status.PUBLISHED) {System.out.println("Already published.");return;}if (p.getStatus() != Post.Status.REVIEW) {System.out.println("Post must be in REVIEW state to publish. Current: " + p.getStatus());return;}if (!actor.canPublish(p)) {System.out.println("Author " + actor.getName() + " is not allowed to publish this post (policy).");return;}p.setStatus(Post.Status.PUBLISHED);actor.incrementPublishedCount();System.out.println("Published: " + p + " at " + p.getPublishedAt());}public List<Post> listByCategory(int categoryId) {return posts.values().stream().filter(p -> p.getCategory() != null && p.getCategory().getCategoryId() == categoryId).collect(Collectors.toList());}public Map<Author, Integer> authorPublicationCounts() {Map<Author, Integer> m = new HashMap<>();for (Author a : authors.values()) {m.put(a, a.getPublishedCount());}return m;}public List<Post> search(String titleQuery) {String q = titleQuery.toLowerCase();return posts.values().stream().filter(p -> p.getTitle() != null && p.getTitle().toLowerCase().contains(q)).collect(Collectors.toList());}public List<Post> search(String query, boolean searchTag) {if (!searchTag) return search(query);String t = query.toLowerCase();return posts.values().stream().filter(p -> p.getTags().stream().anyMatch(x -> x.toLowerCase().equals(t))).collect(Collectors.toList());}public List<Post> search(LocalDateTime from, LocalDateTime to) {return posts.values().stream().filter(p -> p.getCreatedAt().compareTo(from) >= 0 && p.getCreatedAt().compareTo(to) <= 0).collect(Collectors.toList());}public Collection<Post> listAllPosts() {return posts.values();}}
